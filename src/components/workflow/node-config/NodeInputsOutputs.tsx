
import React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Plus, X } from 'lucide-react';

interface NodeInputsOutputsProps {
  inputs: string[];
  setInputs: React.Dispatch<React.SetStateAction<string[]>>;
  outputs: string[];
  setOutputs: React.Dispatch<React.SetStateAction<string[]>>;
  nodeType: string;
}

const NodeInputsOutputs: React.FC<NodeInputsOutputsProps> = ({
  inputs,
  setInputs,
  outputs,
  setOutputs,
  nodeType
}) => {
  const addInput = () => {
    setInputs([...inputs, '']);
  };

  const addOutput = () => {
    setOutputs([...outputs, '']);
  };

  const updateInput = (index: number, value: string) => {
    const newInputs = [...inputs];
    newInputs[index] = value;
    setInputs(newInputs);
  };

  const updateOutput = (index: number, value: string) => {
    const newOutputs = [...outputs];
    newOutputs[index] = value;
    setOutputs(newOutputs);
  };

  const removeInput = (index: number) => {
    setInputs(inputs.filter((_, i) => i !== index));
  };

  const removeOutput = (index: number) => {
    setOutputs(outputs.filter((_, i) => i !== index));
  };

  const getInputDescription = () => {
    switch (nodeType) {
      case 'datasource':
        return 'Configure which data fields this source requires';
      case 'model':
        return 'Define the inputs required for this ML model';
      case 'rule':
        return 'Define the data inputs this rule will evaluate';
      default:
        return 'Configure the data inputs needed by this node';
    }
  };

  const getOutputDescription = () => {
    switch (nodeType) {
      case 'datasource':
        return 'Define what data fields this source will provide';
      case 'model':
        return 'Specify the outputs generated by this ML model';
      case 'rule':
        return 'Define the possible outcomes of this rule';
      default:
        return 'Configure the data outputs produced by this node';
    }
  };

  return (
    <div className="space-y-6">
      <div className="space-y-3">
        <div>
          <Label className="text-base">Inputs</Label>
          <p className="text-sm text-muted-foreground">{getInputDescription()}</p>
        </div>
        
        {inputs.length === 0 ? (
          <div className="text-sm text-muted-foreground py-2">
            No inputs configured. Add inputs to specify what data this node requires.
          </div>
        ) : (
          <div className="space-y-2">
            {inputs.map((input, index) => (
              <div key={`input-${index}`} className="flex items-center gap-2">
                <Input
                  value={input}
                  onChange={(e) => updateInput(index, e.target.value)}
                  placeholder="e.g., userData, transactionData"
                  className="flex-1"
                />
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => removeInput(index)}
                  type="button"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )}
        
        <Button 
          type="button" 
          variant="outline" 
          onClick={addInput}
          className="mt-2"
          size="sm"
        >
          <Plus className="h-4 w-4 mr-1" /> Add Input
        </Button>
      </div>

      <Separator />

      <div className="space-y-3">
        <div>
          <Label className="text-base">Outputs</Label>
          <p className="text-sm text-muted-foreground">{getOutputDescription()}</p>
        </div>
        
        {outputs.length === 0 ? (
          <div className="text-sm text-muted-foreground py-2">
            No outputs configured. Add outputs to specify what data this node produces.
          </div>
        ) : (
          <div className="space-y-2">
            {outputs.map((output, index) => (
              <div key={`output-${index}`} className="flex items-center gap-2">
                <Input
                  value={output}
                  onChange={(e) => updateOutput(index, e.target.value)}
                  placeholder="e.g., riskScore, prediction"
                  className="flex-1"
                />
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => removeOutput(index)}
                  type="button"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )}
        
        <Button 
          type="button" 
          variant="outline" 
          onClick={addOutput}
          className="mt-2"
          size="sm"
        >
          <Plus className="h-4 w-4 mr-1" /> Add Output
        </Button>
      </div>
    </div>
  );
};

export default NodeInputsOutputs;
